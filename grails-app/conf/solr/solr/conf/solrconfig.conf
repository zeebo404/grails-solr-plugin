config {
	luceneMatchVersion '4.10.3'

	lib dir: '${solr.install.dir:../../../}/contrib/extraction/lib', regex: /.*\.jar/
	lib dir: '${solr.install.dir:../../../}/dist/', regex: /solr-cell-\d.*\.jar/

	lib dir: '${solr.install.dir:../../../}/contrib/clustering/lib', regex: /.*\.jar/
	lib dir: '${solr.install.dir:../../../}/dist/', regex: /solr-clustering-\d.*\.jar/

	lib dir: '${solr.install.dir:../../../}/contrib/langid/lib', regex: /.*\.jar/
	lib dir: '${solr.install.dir:../../../}/dist/', regex: /solr-langid-\d.*\.jar/

	lib dir: '${solr.install.dir:../../../}/contrib/velocity/lib', regex: /.*\.jar/
	lib dir: '${solr.install.dir:../../../}/dist/', regex: /solr-velocity-\d.*\.jar/

	dataDir '${solr.data.dir:}'

	directoryFactory(name: 'DirectoryFactory', class: '${solr.directoryFactory:solr.NRTCachingDirectoryFactory}') {
		str name: 'solr.hdfs.home', '${solr.hdfs.home:}'
		str name: 'solr.hdfs.confdir', '${solr.hdfs.confdir:}'
		str name: 'solr.hdfs.blockcache.enabled', '${solr.hdfs.blockcache.enabled:true}'
		str name: 'solr.hdfs.blockcache.global', '${solr.hdfs.blockcache.global:true}'
	}

	codecFactory class: 'solr.SchemaCodecFactory'

	schemaFactory class: 'ClassicIndexSchemaFactory'

	indexConfig {
		// filter class:'solr.LimitTokenCountFilterFactory', maxTokenCount:'10000'
		// writeLockTimeout 1000
		// maxIndexingThreads 8
		// useCompoundFile false
		// ramBufferSizeMB 100
		// maxBufferedDocs 1000
		// unlockOnStartup false
		lockType '${solr.lock.type:native}'

		infoStream true
		checkIntegrityAtMerge false
	}

//	jmx {
//		jmx agentId:'myAgent'
//		jmx serviceUrl:'service:jmx:rmi///jndi/rmi://localhost:9999/solr'
//	}

	updateHandler(class: 'solr.DirectUpdateHandler2') {
		updateLog {
			str name: 'dir', '${solr.ulog.dir:}'
		}

		autoCommit {
			maxTime '${solr.autoCommit.maxTime:15000}'
			openSearcher 'false'
		}

		autoSoftCommit {
			maxTime '${solr.autoSoftCommit.maxTime:-1}'
		}
	}

	query {
		maxBooleanClauses 1024
		filterCache class: 'solr.FastLRUCache', size: 512, initialSize: 512, autowarmCount: 0
		queryResultCache class: 'solr.LRUCache', size: 512, initialSize: 512, autowarmCount: 0
		documentCache class: 'solr.LRUCache', size: 512, initialSize: 512, autowarmCount: 0
		cache name: 'perSegFilter', class: 'solr.search.LRUCache', size: 10, initialSize: 0, autowarmCount: 10, regenerator: 'solr.NoOpRegenerator'

		enableLazyFieldLoading true
		queryResultWindowSize 20
		queryResultMaxDocsCached 200

		listener(event: 'newSearcher', class: 'solr.QuerySenderListener') {
			arr(name: 'queries') {
//				lst {
//					str name:'q', 'solr'
//					str name:'sort', 'price asc'
//				}
//				lst {
//					str name:'q', 'rocks'
//					str name:'sort', 'weight desc'
//				}
			}
		}

		listener(event: 'firstSearcher', class: 'solr.QuerySenderListener') {
			arr(name: 'queries') {
				lst {
					str name: 'q', 'static firstSearcher warming in solrconfig.xml'
				}
			}
		}

		useColdSearcher false

		maxWarmingSearchers 2
	}

	requestDispatcher(handleSelect: false) {
		requestParsers enableRemoteStreaming: true, multipartUploadLimitInKB: 2048000, formdataUploadLimitInKB: 2048, addHttpRequestToContext: false
		httpCaching never304: true
	}

	requestHandler(name: '/select', class: 'solr.SearchHandler') {
		lst(name: 'defaults') {
			str name: 'echoParams', 'explicit'
			'int' name: 'rows', 10
			str name: 'df', 'text'
		}
	}

	requestHandler(name: '/query', class: 'solr.SearchHandler') {
		lst(name: 'defaults') {
			str name: 'echoParams', 'explicit'
			str name: 'wt', 'json'
			str name: 'indent', true
			str name: 'df', 'text'
		}
	}

	requestHandler(name: '/get', class: 'solr.RealTimeGetHandler') {
		lst(name: 'defaults') {
			str name: 'omitHeader', true
			str name: 'wt', 'json'
			str name: 'indent', true
		}
	}

	requestHandler(name: '/export', class: 'solr.SearchHandler') {
		lst(name: 'invariants') {
			str name: 'rq', '{!xport}'
			str name: 'wt', 'xsort'
			str name: 'distrib', false
		}

		arr(name: 'components') {
			str 'query'
		}
	}

	requestHandler(name: '/update', class: 'solr.UpdateRequestHandler') {

	}

	requestHandler(name: '/update/extract', startup: 'lazy', class: 'solr.extraction.ExtractingRequestHandler') {
		lst(name: 'defaults') {
			str name: 'lowernames', true
			str name: 'uprefix', 'ignored_'
			str name: 'captureAttr', true
			str name: 'fmap.a', 'links'
			str name: 'fmap.div', 'ignored_'
		}
	}

	requestHandler name: '/analysis/field', startup: 'lazy', class: 'solr.FieldAnalysisRequestHandler'
	requestHandler name: '/analysis/document', startup: 'lazy', class: 'solr.DocumentAnalysisRequestHandler'

	requestHandler name: '/admin/', class: 'solr.admin.AdminHandlers'

	requestHandler(name: '/admin/ping', class: 'solr.PingRequestHandler') {
		lst(name: 'invariants') {
			str name: 'q', 'solrpingquery'
		}
		lst(name: 'defaults') {
			str name: 'echoParams', 'all'
		}
	}

	requestHandler(name:'/debug/dump', class:'solr.DumpRequestHandler') {
		lst(name:'defaults') {
			str name:'echoParams', 'explicit'
			str name:'echoHandler', true
		}
	}

	searchComponent(name: 'spellcheck', class: 'solr.SpellCheckComponent') {
		str name: 'queryAnalyzerFieldType', 'text_general'

		lst(name: 'spellchecker') {
			str name: 'name', 'default'
			str name: 'field', 'text'
			str name: 'classname', 'solr.DirectSolrSpellChecker'
			str name: 'distanceMeasure', 'internal'
			'float' name: 'accuracy', 0.5
			'int' name: 'maxEdits', 2
			'int' name: 'minPrefix', 1
			'int' name: 'maxInspections', 5
			'int' name: 'minQueryLength', 4
			'float' name: 'maxQueryFrequency', 0.01
		}

		lst(name: "spellchecker") {
			str name: 'name', 'wordbreak'
			str name: 'classname', 'solr.WordBreakSolrSpellChecker'
			str name: 'field', 'name'
			str name: 'combineWords', true
			str name: 'breakWords', true
			'int' name: 'maxChanges', 10
		}
	}

	searchComponent name:'tvComponent', class:'solr.TermVectorComponent'

	searchComponent(name:'clustering', enable:'${solr.clustering.enabled:false}', class:'solr.clustering.ClusteringComponent') {
		lst(name:'engine') {
			str name:'name', 'lingo'
			str name:'carrot.algorithm', 'org.carrot2.clustering.lingo.LingoClusteringAlgorithm'
			str name:'carrot.resourcesDir', 'clustering/carrot2'
		}

		lst(name:'engine') {
			str name:'name', 'stc'
			str name:'carrot.algorithm', 'org.carrot2.clustering.stc.STCClusteringAlgorithm'
		}

		lst(name:'engine') {
			str name:'name', 'kmeans'
			str name:'carrot.algorithm', 'org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm'
		}
	}

	searchComponent name:'terms', class:'solr.TermsComponent'

//	searchComponent(name:'elevator', class:'solr.QueryElevationComponent') {
//		str name:'queryFieldType', 'string'
//		str name:'config-file', 'elevate.xml'
//	}

	searchComponent(name:'highlight', class:'solr.HighlightComponent') {
		highlighting {
			fragmenter(name:'gap', default:true, class:'solr.highlight.GapFragmenter') {
				lst(name:'defaults') {
					'int' name:'hl.fragsize', 100
				}
			}

			fragmenter(name:'regex', class:'solr.highlight.RegexFragmenter') {
				lst(name:'defaults') {
					'int' name:'hl.fragsize', 70
					'float' name:'hl.regex.slop', 0.5
					str(name:'hl.regex.pattern') {
						mkp.yieldUnescaped(/[-\w ,\/\n\&quot;&apos;]{20,200}/)
					}
				}
			}

			formatter(name:'html', default:true, class:'solr.highlight.HtmlFormatter') {
				lst(name:'defaults') {
					str(name:'hl.simple.pre') {
						mkp.yieldUnescaped('<![CDATA[<em>]]>')
					}
					str(name:'hl.simple.post') {
						mkp.yieldUnescaped('<![CDATA[</em>]]>')
					}
				}
			}

			encoder name:'html', class:'solr.highlight.HtmlEncoder'

			fragListBuilder name:'simple', class:'solr.highlight.SimpleFragListBuilder'
			fragListBuilder name:'single', class:'solr.highlight.SingleFragListBuilder'
			fragListBuilder name:'weighted', default:true, class:'solr.highlight.WeightedFragListBuilder'
			fragmentsBuilder(name:'default', default:true, class:'solr.highlight.ScoreOrderFragmentsBuilder') {
//				lst(name:'defaults') {
//					str name:'hl.multiValuedSeparatorChar', '/'
//				}
			}

			fragmentsBuilder(name:'colored', class:'solr.highlight.ScoreOrderFragmentsBuilder') {
				lst(name:'defaults') {
					str(name:'hl.tag.pre') {
						mkp.yieldUnescaped('''<![CDATA[
			   <b style="background:yellow">,<b style="background:lawgreen">,
			   <b style="background:aquamarine">,<b style="background:magenta">,
			   <b style="background:palegreen">,<b style="background:coral">,
			   <b style="background:wheat">,<b style="background:khaki">,
			   <b style="background:lime">,<b style="background:deepskyblue">]]>''')
					}
					str(name:'hl.tag.post') {
						mkp.yieldUnescaped('<![CDATA[</b>]]>')
					}
				}
			}

			boundaryScanner(name:'default', default:true, class:'solr.highlight.SimpleBoundaryScanner') {
				lst(name:'defaults') {
					str name:'hl.bs.maxScan', 10
					str(name:'hl.bs.chars') {
						mkp.yieldUnescaped('.,!? &#9;&#10;&#13;')
					}
				}
			}
			boundaryScanner(name:'breakIterator', class:'solr.highlight.BreakIteratorBoundaryScanner') {
				lst(name:'defaults') {
					str name:'hl.bs.type', 'WORD'
					str name:'hl.bs.language', 'en'
					str name:'hl.bs.country', 'US'
				}
			}
		}
	}

	queryResponseWriter(name:'json', class:'solr.JSONResponseWriter') {
		str name:'content-type', 'text/plain; charset=UTF-8'
	}

	queryResponseWriter(name:'xslt', class:'solr.XSLTResponseWriter') {
		'int' name:'xsltCacheLifetimeSeconds', 5
	}

	admin {
		defaultQuery '*:*'
	}
}